def eh_decimal_simples(texto):
    """
    Verifica se texto √© um n√∫mero decimal positivo com no m√°ximo um ponto,
    sem usar split nem count.
    Retorna True se for v√°lido, False caso contr√°rio.
    """
    ponto_encontrado = False  # Flag para controlar se j√° encontrou um ponto
    if len(texto) == 0:       # String vazia n√£o √© n√∫mero v√°lido
        return False
    for c in texto:
        if c == '.':
            if ponto_encontrado:
                # Se j√° encontrou um ponto antes, n√£o pode ter outro
                return False
            ponto_encontrado = True
        elif not c.isnumeric():
            # Se encontrar caractere que n√£o seja n√∫mero nem ponto, inv√°lido
            return False
    return True  # Passou por todas as verifica√ß√µes, √© um n√∫mero decimal v√°lido

def validar_entrada(nome, minimo, maximo):
    """
    Solicita repetidamente um valor ao usu√°rio at√© que seja um n√∫mero decimal v√°lido
    e esteja dentro do intervalo definido por minimo e maximo.
    Retorna o valor convertido para float.
    """
    while True:
        valor = input(f"{nome}: ")  # Solicita entrada do usu√°rio

        if not eh_decimal_simples(valor):
            # Se a entrada n√£o for n√∫mero decimal v√°lido, avisa e pede de novo
            print(f"[ERRO] {nome} deve ser um n√∫mero positivo (ex: 23.5)")
            continue
        
        val = float(valor)  # Converte a string para float

        if val < minimo or val > maximo:
            # Se o valor estiver fora do intervalo permitido, avisa e pede de novo
            print(f"[ERRO] {nome} deve estar entre {minimo} e {maximo}")
            continue
        
        return val  # Valor v√°lido e dentro do intervalo, retorna

def classificar_nivel(nivel_rio):
    """
    Classifica o n√≠vel do rio em tr√™s categorias:
    - Alerta m√°ximo: n√≠vel >= 200 cm
    - Alerta: n√≠vel >= 100 cm e < 200 cm
    - Seguro: n√≠vel < 100 cm
    Retorna uma string com o status.
    """
    if nivel_rio >= 200:
        return "üî¥ Alerta m√°ximo"
    elif nivel_rio >= 100:
        return "üü° Alerta"
    else:
        return "üü¢ Seguro"

def processar_dados(nivel, umid):
    """
    Recebe o n√≠vel do rio e umidade, classifica o n√≠vel,
    e exibe uma an√°lise formatada para o usu√°rio.
    """
    status = classificar_nivel(nivel)  # Obt√©m status do n√≠vel
    print("\nüìä An√°lise de Risco:")
    print(f"N√≠vel: {nivel:.1f} cm - {status}")  # Exibe n√≠vel com 1 casa decimal e status
    print(f"Umidade: {umid:.1f} %")             # Exibe umidade com 1 casa decimal

def receber_dados():
    """
    Fun√ß√£o principal do programa.
    Solicita os dados ao usu√°rio, valida as entradas,
    e chama a fun√ß√£o para processar e mostrar o resultado.
    """
    print("Digite os dados coletados do sensor:")
    
    nivel_ok = validar_entrada("N√≠vel do rio (cm)", 0, 300)  # Solicita e valida n√≠vel do rio
    umid_ok = validar_entrada("Umidade (%)", 0, 100)        # Solicita e valida umidade

    processar_dados(nivel_ok, umid_ok)  # Exibe an√°lise com os dados v√°lidos

# In√≠cio do programa: chama a fun√ß√£o principal para rodar
receber_dados()
